
lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a0  2000000c  0800314c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000ac  0800314c  000200ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000926a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000165e  00000000  00000000  000292a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000898  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c0  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f54  00000000  00000000  0002b960  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f0d  00000000  00000000  0002f8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000327c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002190  00000000  00000000  00032840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030d0 	.word	0x080030d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030d0 	.word	0x080030d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f91a 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f002 fc93 	bl	8002e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <HAL_InitTick+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d022      	beq.n	8000572 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_InitTick+0x6c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <HAL_InitTick+0x68>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000538:	fbb1 f3f3 	udiv	r3, r1, r3
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f918 	bl	8000776 <HAL_SYSTICK_Config>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10f      	bne.n	800056c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b0f      	cmp	r3, #15
 8000550:	d809      	bhi.n	8000566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000552:	2200      	movs	r2, #0
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	f04f 30ff 	mov.w	r0, #4294967295
 800055a:	f000 f8f0 	bl	800073e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_InitTick+0x70>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	e007      	b.n	8000576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e004      	b.n	8000576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e001      	b.n	8000576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004
 8000584:	20000008 	.word	0x20000008
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x1c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4413      	add	r3, r2
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x1c>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	490d      	ldr	r1, [pc, #52]	; (8000678 <__NVIC_SetPriority+0x4c>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <__NVIC_SetPriority+0x50>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	3b04      	subs	r3, #4
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	2201      	movs	r2, #1
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	401a      	ands	r2, r3
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c6:	2101      	movs	r1, #1
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	1e59      	subs	r1, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	4313      	orrs	r3, r2
         );
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f7ff ff90 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff49 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000750:	f7ff ff5e 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff ff90 	bl	8000680 <NVIC_EncodePriority>
 8000760:	4602      	mov	r2, r0
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff5f 	bl	800062c <__NVIC_SetPriority>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffb0 	bl	80006e4 <SysTick_Config>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079e:	e17f      	b.n	8000aa0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	2101      	movs	r1, #1
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 8171 	beq.w	8000a9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d003      	beq.n	80007c8 <HAL_GPIO_Init+0x38>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b12      	cmp	r3, #18
 80007c6:	d123      	bne.n	8000810 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	08da      	lsrs	r2, r3, #3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3208      	adds	r2, #8
 80007d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	f003 0307 	and.w	r3, r3, #7
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	220f      	movs	r2, #15
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	691a      	ldr	r2, [r3, #16]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	4313      	orrs	r3, r2
 8000800:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	08da      	lsrs	r2, r3, #3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3208      	adds	r2, #8
 800080a:	6939      	ldr	r1, [r7, #16]
 800080c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2203      	movs	r2, #3
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 0203 	and.w	r2, r3, #3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d00b      	beq.n	8000864 <HAL_GPIO_Init+0xd4>
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d007      	beq.n	8000864 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000858:	2b11      	cmp	r3, #17
 800085a:	d003      	beq.n	8000864 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b12      	cmp	r3, #18
 8000862:	d130      	bne.n	80008c6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	2203      	movs	r2, #3
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4013      	ands	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800089a:	2201      	movs	r2, #1
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	091b      	lsrs	r3, r3, #4
 80008b0:	f003 0201 	and.w	r2, r3, #1
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d118      	bne.n	8000904 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008d8:	2201      	movs	r2, #1
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	f003 0201 	and.w	r2, r3, #1
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80ac 	beq.w	8000a9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4a5e      	ldr	r2, [pc, #376]	; (8000abc <HAL_GPIO_Init+0x32c>)
 8000944:	4b5d      	ldr	r3, [pc, #372]	; (8000abc <HAL_GPIO_Init+0x32c>)
 8000946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6613      	str	r3, [r2, #96]	; 0x60
 800094e:	4b5b      	ldr	r3, [pc, #364]	; (8000abc <HAL_GPIO_Init+0x32c>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800095a:	4a59      	ldr	r2, [pc, #356]	; (8000ac0 <HAL_GPIO_Init+0x330>)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	3302      	adds	r3, #2
 8000962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000966:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000984:	d025      	beq.n	80009d2 <HAL_GPIO_Init+0x242>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a4e      	ldr	r2, [pc, #312]	; (8000ac4 <HAL_GPIO_Init+0x334>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d01f      	beq.n	80009ce <HAL_GPIO_Init+0x23e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4d      	ldr	r2, [pc, #308]	; (8000ac8 <HAL_GPIO_Init+0x338>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d019      	beq.n	80009ca <HAL_GPIO_Init+0x23a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <HAL_GPIO_Init+0x33c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d013      	beq.n	80009c6 <HAL_GPIO_Init+0x236>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4b      	ldr	r2, [pc, #300]	; (8000ad0 <HAL_GPIO_Init+0x340>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d00d      	beq.n	80009c2 <HAL_GPIO_Init+0x232>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <HAL_GPIO_Init+0x344>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d007      	beq.n	80009be <HAL_GPIO_Init+0x22e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a49      	ldr	r2, [pc, #292]	; (8000ad8 <HAL_GPIO_Init+0x348>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_GPIO_Init+0x22a>
 80009b6:	2306      	movs	r3, #6
 80009b8:	e00c      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009ba:	2307      	movs	r3, #7
 80009bc:	e00a      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009be:	2305      	movs	r3, #5
 80009c0:	e008      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009c2:	2304      	movs	r3, #4
 80009c4:	e006      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e004      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009ca:	2302      	movs	r3, #2
 80009cc:	e002      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <HAL_GPIO_Init+0x244>
 80009d2:	2300      	movs	r3, #0
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	f002 0203 	and.w	r2, r2, #3
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	4093      	lsls	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e4:	4936      	ldr	r1, [pc, #216]	; (8000ac0 <HAL_GPIO_Init+0x330>)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <HAL_GPIO_Init+0x34c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a16:	4a31      	ldr	r2, [pc, #196]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a94:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_GPIO_Init+0x34c>)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f47f ae78 	bne.w	80007a0 <HAL_GPIO_Init+0x10>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	371c      	adds	r7, #28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	48000800 	.word	0x48000800
 8000acc:	48000c00 	.word	0x48000c00
 8000ad0:	48001000 	.word	0x48001000
 8000ad4:	48001400 	.word	0x48001400
 8000ad8:	48001800 	.word	0x48001800
 8000adc:	40010400 	.word	0x40010400

08000ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691a      	ldr	r2, [r3, #16]
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e001      	b.n	8000b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40007000 	.word	0x40007000

08000b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b6a:	d130      	bne.n	8000bce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b78:	d038      	beq.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2232      	movs	r2, #50	; 0x32
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b96:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9a:	0c9b      	lsrs	r3, r3, #18
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ba0:	e002      	b.n	8000ba8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb4:	d102      	bne.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f2      	bne.n	8000ba2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bc8:	d110      	bne.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e00f      	b.n	8000bee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d007      	beq.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40007000 	.word	0x40007000
 8000c00:	20000008 	.word	0x20000008
 8000c04:	431bde83 	.word	0x431bde83

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e3d4      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c1a:	4ba1      	ldr	r3, [pc, #644]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c24:	4b9e      	ldr	r3, [pc, #632]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 80e4 	beq.w	8000e04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <HAL_RCC_OscConfig+0x4a>
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2b0c      	cmp	r3, #12
 8000c46:	f040 808b 	bne.w	8000d60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f040 8087 	bne.w	8000d60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c52:	4b93      	ldr	r3, [pc, #588]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <HAL_RCC_OscConfig+0x62>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e3ac      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a1a      	ldr	r2, [r3, #32]
 8000c6e:	4b8c      	ldr	r3, [pc, #560]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <HAL_RCC_OscConfig+0x7c>
 8000c7a:	4b89      	ldr	r3, [pc, #548]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c82:	e005      	b.n	8000c90 <HAL_RCC_OscConfig+0x88>
 8000c84:	4b86      	ldr	r3, [pc, #536]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d923      	bls.n	8000cdc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fd3f 	bl	800171c <RCC_SetFlashLatencyFromMSIRange>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e38d      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ca8:	4a7d      	ldr	r2, [pc, #500]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000caa:	4b7d      	ldr	r3, [pc, #500]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	497a      	ldr	r1, [pc, #488]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cb6:	4b7a      	ldr	r3, [pc, #488]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a1b      	ldr	r3, [r3, #32]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc6:	4976      	ldr	r1, [pc, #472]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cc8:	4b75      	ldr	r3, [pc, #468]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	604b      	str	r3, [r1, #4]
 8000cda:	e025      	b.n	8000d28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cdc:	4a70      	ldr	r2, [pc, #448]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cde:	4b70      	ldr	r3, [pc, #448]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	496d      	ldr	r1, [pc, #436]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cea:	4b6d      	ldr	r3, [pc, #436]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cfa:	4969      	ldr	r1, [pc, #420]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cfc:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d109      	bne.n	8000d28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fcff 	bl	800171c <RCC_SetFlashLatencyFromMSIRange>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e34d      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d28:	f000 fc36 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	4a5a      	ldr	r2, [pc, #360]	; (8000ea4 <HAL_RCC_OscConfig+0x29c>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4a58      	ldr	r2, [pc, #352]	; (8000ea8 <HAL_RCC_OscConfig+0x2a0>)
 8000d46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_RCC_OscConfig+0x2a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fbe3 	bl	8000518 <HAL_InitTick>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d052      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	e331      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d032      	beq.n	8000dce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d68:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fc1c 	bl	80005b0 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc18 	bl	80005b0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e31a      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9a:	4a41      	ldr	r2, [pc, #260]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000d9c:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	493e      	ldr	r1, [pc, #248]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000da8:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db8:	4939      	ldr	r1, [pc, #228]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
 8000dcc:	e01a      	b.n	8000e04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dce:	4a34      	ldr	r2, [pc, #208]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fbe9 	bl	80005b0 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de2:	f7ff fbe5 	bl	80005b0 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e2e7      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f0      	bne.n	8000de2 <HAL_RCC_OscConfig+0x1da>
 8000e00:	e000      	b.n	8000e04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d074      	beq.n	8000efa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d005      	beq.n	8000e22 <HAL_RCC_OscConfig+0x21a>
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b0c      	cmp	r3, #12
 8000e1a:	d10e      	bne.n	8000e3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d10b      	bne.n	8000e3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d064      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d160      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e2c4      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x24a>
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e01d      	b.n	8000e8e <HAL_RCC_OscConfig+0x286>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5a:	d10c      	bne.n	8000e76 <HAL_RCC_OscConfig+0x26e>
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e00b      	b.n	8000e8e <HAL_RCC_OscConfig+0x286>
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_RCC_OscConfig+0x298>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d01c      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e96:	f7ff fb8b 	bl	80005b0 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e9c:	e011      	b.n	8000ec2 <HAL_RCC_OscConfig+0x2ba>
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	080030e8 	.word	0x080030e8
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb0:	f7ff fb7e 	bl	80005b0 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e280      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec2:	4baf      	ldr	r3, [pc, #700]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x2a8>
 8000ece:	e014      	b.n	8000efa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fb6e 	bl	80005b0 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fb6a 	bl	80005b0 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e26c      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eea:	4ba5      	ldr	r3, [pc, #660]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2d0>
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d060      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d005      	beq.n	8000f18 <HAL_RCC_OscConfig+0x310>
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2b0c      	cmp	r3, #12
 8000f10:	d119      	bne.n	8000f46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d116      	bne.n	8000f46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f18:	4b99      	ldr	r3, [pc, #612]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x328>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e249      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4993      	ldr	r1, [pc, #588]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f32:	4b93      	ldr	r3, [pc, #588]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	061b      	lsls	r3, r3, #24
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f44:	e040      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d023      	beq.n	8000f96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4e:	4a8c      	ldr	r2, [pc, #560]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f50:	4b8b      	ldr	r3, [pc, #556]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fb29 	bl	80005b0 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fb25 	bl	80005b0 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e227      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f74:	4b82      	ldr	r3, [pc, #520]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	497f      	ldr	r1, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f82:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	061b      	lsls	r3, r3, #24
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
 8000f94:	e018      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f96:	4a7a      	ldr	r2, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f98:	4b79      	ldr	r3, [pc, #484]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fb05 	bl	80005b0 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff fb01 	bl	80005b0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e203      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fbc:	4b70      	ldr	r3, [pc, #448]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f0      	bne.n	8000faa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d03c      	beq.n	800104e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01c      	beq.n	8001016 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fdc:	4a68      	ldr	r2, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000fde:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8000fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fec:	f7ff fae0 	bl	80005b0 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fadc 	bl	80005b0 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e1de      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8001008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0ef      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x3ec>
 8001014:	e01b      	b.n	800104e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001016:	4a5a      	ldr	r2, [pc, #360]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8001018:	4b59      	ldr	r3, [pc, #356]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800101a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001026:	f7ff fac3 	bl	80005b0 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102e:	f7ff fabf 	bl	80005b0 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1c1      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001040:	4b4f      	ldr	r3, [pc, #316]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8001042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1ef      	bne.n	800102e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80a6 	beq.w	80011a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001060:	4b47      	ldr	r3, [pc, #284]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10d      	bne.n	8001088 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	4a44      	ldr	r2, [pc, #272]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001076:	6593      	str	r3, [r2, #88]	; 0x58
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001084:	2301      	movs	r3, #1
 8001086:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_RCC_OscConfig+0x57c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001090:	2b00      	cmp	r3, #0
 8001092:	d118      	bne.n	80010c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001094:	4a3b      	ldr	r2, [pc, #236]	; (8001184 <HAL_RCC_OscConfig+0x57c>)
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_RCC_OscConfig+0x57c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fa86 	bl	80005b0 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a8:	f7ff fa82 	bl	80005b0 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e184      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <HAL_RCC_OscConfig+0x57c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <HAL_RCC_OscConfig+0x4d8>
 80010ce:	4a2c      	ldr	r2, [pc, #176]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 80010d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010de:	e024      	b.n	800112a <HAL_RCC_OscConfig+0x522>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d110      	bne.n	800110a <HAL_RCC_OscConfig+0x502>
 80010e8:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 80010ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 80010fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001108:	e00f      	b.n	800112a <HAL_RCC_OscConfig+0x522>
 800110a:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111a:	4a19      	ldr	r2, [pc, #100]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	f023 0304 	bic.w	r3, r3, #4
 8001126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d016      	beq.n	8001160 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001132:	f7ff fa3d 	bl	80005b0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fa39 	bl	80005b0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e139      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_OscConfig+0x578>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0ed      	beq.n	800113a <HAL_RCC_OscConfig+0x532>
 800115e:	e01a      	b.n	8001196 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff fa26 	bl	80005b0 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001166:	e00f      	b.n	8001188 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001168:	f7ff fa22 	bl	80005b0 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d906      	bls.n	8001188 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e122      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001188:	4b90      	ldr	r3, [pc, #576]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1e8      	bne.n	8001168 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d105      	bne.n	80011a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119c:	4a8b      	ldr	r2, [pc, #556]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8108 	beq.w	80013c2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	f040 80d0 	bne.w	800135c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011bc:	4b83      	ldr	r3, [pc, #524]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d130      	bne.n	8001232 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	3b01      	subs	r3, #1
 80011dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d127      	bne.n	8001232 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d11f      	bne.n	8001232 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011fc:	2a07      	cmp	r2, #7
 80011fe:	bf14      	ite	ne
 8001200:	2201      	movne	r2, #1
 8001202:	2200      	moveq	r2, #0
 8001204:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001206:	4293      	cmp	r3, r2
 8001208:	d113      	bne.n	8001232 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	3b01      	subs	r3, #1
 8001218:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800121a:	429a      	cmp	r2, r3
 800121c:	d109      	bne.n	8001232 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	3b01      	subs	r3, #1
 800122c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d06e      	beq.n	8001310 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b0c      	cmp	r3, #12
 8001236:	d069      	beq.n	800130c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001238:	4b64      	ldr	r3, [pc, #400]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0b7      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001254:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800125e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001260:	f7ff f9a6 	bl	80005b0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff f9a2 	bl	80005b0 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0a4      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001286:	4851      	ldr	r0, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <HAL_RCC_OscConfig+0x7c8>)
 800128e:	4013      	ands	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001298:	3a01      	subs	r2, #1
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	4311      	orrs	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012a2:	0212      	lsls	r2, r2, #8
 80012a4:	4311      	orrs	r1, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012aa:	0852      	lsrs	r2, r2, #1
 80012ac:	3a01      	subs	r2, #1
 80012ae:	0552      	lsls	r2, r2, #21
 80012b0:	4311      	orrs	r1, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012b6:	0852      	lsrs	r2, r2, #1
 80012b8:	3a01      	subs	r2, #1
 80012ba:	0652      	lsls	r2, r2, #25
 80012bc:	4311      	orrs	r1, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012c2:	0912      	lsrs	r2, r2, #4
 80012c4:	0452      	lsls	r2, r2, #17
 80012c6:	430a      	orrs	r2, r1
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012cc:	4a3f      	ldr	r2, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012d8:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e4:	f7ff f964 	bl	80005b0 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff f960 	bl	80005b0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e062      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800130a:	e05a      	b.n	80013c2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e059      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d152      	bne.n	80013c2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001326:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001332:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001334:	f7ff f93c 	bl	80005b0 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff f938 	bl	80005b0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e03a      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x734>
 800135a:	e032      	b.n	80013c2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d02d      	beq.n	80013be <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800136c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f023 0303 	bic.w	r3, r3, #3
 8001384:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff f90b 	bl	80005b0 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff f907 	bl	80005b0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e009      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_RCC_OscConfig+0x7c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x796>
 80013bc:	e001      	b.n	80013c2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	f99d808c 	.word	0xf99d808c

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0c8      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0207 	and.w	r2, r3, #7
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d210      	bcs.n	8001418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4963      	ldr	r1, [pc, #396]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80013f8:	4b62      	ldr	r3, [pc, #392]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 0207 	bic.w	r2, r3, #7
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0207 	and.w	r2, r3, #7
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0b0      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04c      	beq.n	80014be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d107      	bne.n	800143c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142c:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d121      	bne.n	800147c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e09e      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d107      	bne.n	8001454 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d115      	bne.n	800147c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e092      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d107      	bne.n	800146c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e086      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e07e      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800147c:	4942      	ldr	r1, [pc, #264]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800147e:	4b42      	ldr	r3, [pc, #264]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 0203 	bic.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800148e:	f7ff f88f 	bl	80005b0 <HAL_GetTick>
 8001492:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001494:	e00a      	b.n	80014ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001496:	f7ff f88b 	bl	80005b0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e066      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 020c 	and.w	r2, r3, #12
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d1eb      	bne.n	8001496 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ca:	492f      	ldr	r1, [pc, #188]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0207 	and.w	r2, r3, #7
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d910      	bls.n	800150c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4926      	ldr	r1, [pc, #152]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 0207 	bic.w	r2, r3, #7
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_ClockConfig+0x1b0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0207 	and.w	r2, r3, #7
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e036      	b.n	800157a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001518:	491b      	ldr	r1, [pc, #108]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001536:	4914      	ldr	r1, [pc, #80]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800154a:	f000 f825 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800154e:	4601      	mov	r1, r0
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_RCC_ClockConfig+0x1b4>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	fa21 f303 	lsr.w	r3, r1, r3
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffd2 	bl	8000518 <HAL_InitTick>
 8001574:	4603      	mov	r3, r0
 8001576:	72fb      	strb	r3, [r7, #11]

  return status;
 8001578:	7afb      	ldrb	r3, [r7, #11]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000
 8001588:	40021000 	.word	0x40021000
 800158c:	080030e8 	.word	0x080030e8
 8001590:	20000008 	.word	0x20000008
 8001594:	20000000 	.word	0x20000000

08001598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x34>
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d121      	bne.n	800160a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d11e      	bne.n	800160a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e005      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015e8:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10d      	bne.n	8001620 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d102      	bne.n	8001616 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	e004      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b08      	cmp	r3, #8
 800161a:	d101      	bne.n	8001620 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800161e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d133      	bne.n	800168e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d002      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0xa4>
 8001636:	2b03      	cmp	r3, #3
 8001638:	d003      	beq.n	8001642 <HAL_RCC_GetSysClockFreq+0xaa>
 800163a:	e005      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800163e:	617b      	str	r3, [r7, #20]
      break;
 8001640:	e005      	b.n	800164e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001644:	617b      	str	r3, [r7, #20]
      break;
 8001646:	e002      	b.n	800164e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	617b      	str	r3, [r7, #20]
      break;
 800164c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	3301      	adds	r3, #1
 800165a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	fb02 f203 	mul.w	r2, r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_GetSysClockFreq+0x104>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0e5b      	lsrs	r3, r3, #25
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	3301      	adds	r3, #1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800168e:	69bb      	ldr	r3, [r7, #24]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3724      	adds	r7, #36	; 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	08003100 	.word	0x08003100
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200

080016ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016c8:	f7ff fff0 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016cc:	4601      	mov	r1, r0
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	080030f8 	.word	0x080030f8

080016f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80016f4:	f7ff ffda 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016f8:	4601      	mov	r1, r0
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	0adb      	lsrs	r3, r3, #11
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	080030f8 	.word	0x080030f8

0800171c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001734:	f7ff fa04 	bl	8000b40 <HAL_PWREx_GetVoltageRange>
 8001738:	6178      	str	r0, [r7, #20]
 800173a:	e014      	b.n	8001766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001754:	f7ff f9f4 	bl	8000b40 <HAL_PWREx_GetVoltageRange>
 8001758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	d10b      	bne.n	8001786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b80      	cmp	r3, #128	; 0x80
 8001772:	d919      	bls.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2ba0      	cmp	r3, #160	; 0xa0
 8001778:	d902      	bls.n	8001780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800177a:	2302      	movs	r3, #2
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e013      	b.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001780:	2301      	movs	r3, #1
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e010      	b.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b80      	cmp	r3, #128	; 0x80
 800178a:	d902      	bls.n	8001792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800178c:	2303      	movs	r3, #3
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	e00a      	b.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b80      	cmp	r3, #128	; 0x80
 8001796:	d102      	bne.n	800179e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001798:	2302      	movs	r3, #2
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	e004      	b.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b70      	cmp	r3, #112	; 0x70
 80017a2:	d101      	bne.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017a8:	490b      	ldr	r1, [pc, #44]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0207 	bic.w	r2, r3, #7
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0207 	and.w	r2, r3, #7
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80017e4:	2300      	movs	r3, #0
 80017e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017e8:	2300      	movs	r3, #0
 80017ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03f      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001800:	d01c      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001806:	d802      	bhi.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00e      	beq.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800180c:	e01f      	b.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800180e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001812:	d003      	beq.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001814:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001818:	d01c      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800181a:	e018      	b.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800181c:	4a85      	ldr	r2, [pc, #532]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001828:	e015      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fab9 	bl	8001da8 <RCCEx_PLLSAI1_Config>
 8001836:	4603      	mov	r3, r0
 8001838:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800183a:	e00c      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3320      	adds	r3, #32
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fba0 	bl	8001f88 <RCCEx_PLLSAI2_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800184c:	e003      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	74fb      	strb	r3, [r7, #19]
      break;
 8001852:	e000      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001856:	7cfb      	ldrb	r3, [r7, #19]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800185c:	4975      	ldr	r1, [pc, #468]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800185e:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800186c:	4313      	orrs	r3, r2
 800186e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001872:	e001      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d03f      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800188c:	d01c      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800188e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001892:	d802      	bhi.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001898:	e01f      	b.n	80018da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800189a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800189e:	d003      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80018a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80018a4:	d01c      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80018a6:	e018      	b.n	80018da <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018a8:	4a62      	ldr	r2, [pc, #392]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018b4:	e015      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fa73 	bl	8001da8 <RCCEx_PLLSAI1_Config>
 80018c2:	4603      	mov	r3, r0
 80018c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018c6:	e00c      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3320      	adds	r3, #32
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fb5a 	bl	8001f88 <RCCEx_PLLSAI2_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018d8:	e003      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	74fb      	strb	r3, [r7, #19]
      break;
 80018de:	e000      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80018e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018e8:	4952      	ldr	r1, [pc, #328]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ea:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018f8:	4313      	orrs	r3, r2
 80018fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80018fe:	e001      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a0 	beq.w	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001926:	2300      	movs	r3, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00d      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4a41      	ldr	r2, [pc, #260]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001944:	2301      	movs	r3, #1
 8001946:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001948:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001954:	f7fe fe2c 	bl	80005b0 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800195a:	e009      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7fe fe28 	bl	80005b0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d902      	bls.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	74fb      	strb	r3, [r7, #19]
        break;
 800196e:	e005      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ef      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800197c:	7cfb      	ldrb	r3, [r7, #19]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d15c      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01f      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	d019      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7fe fde7 	bl	80005b0 <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e4:	e00b      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7fe fde3 	bl	80005b0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d902      	bls.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	74fb      	strb	r3, [r7, #19]
            break;
 80019fc:	e006      	b.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ec      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a24:	4313      	orrs	r3, r2
 8001a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a2a:	e009      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	74bb      	strb	r3, [r7, #18]
 8001a30:	e006      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a3c:	7cfb      	ldrb	r3, [r7, #19]
 8001a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a40:	7c7b      	ldrb	r3, [r7, #17]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4a9e      	ldr	r2, [pc, #632]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a48:	4b9d      	ldr	r3, [pc, #628]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a5e:	4998      	ldr	r1, [pc, #608]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a60:	4b97      	ldr	r3, [pc, #604]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a80:	498f      	ldr	r1, [pc, #572]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a82:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a88:	f023 020c 	bic.w	r2, r3, #12
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	4313      	orrs	r3, r2
 8001a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001aa2:	4987      	ldr	r1, [pc, #540]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aa4:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00a      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ac4:	497e      	ldr	r1, [pc, #504]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ac6:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001acc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ae6:	4976      	ldr	r1, [pc, #472]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b08:	496d      	ldr	r1, [pc, #436]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b2a:	4965      	ldr	r1, [pc, #404]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b4c:	495c      	ldr	r1, [pc, #368]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b6e:	4954      	ldr	r1, [pc, #336]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b90:	494b      	ldr	r1, [pc, #300]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b92:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bb2:	4943      	ldr	r1, [pc, #268]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb4:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d028      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bd4:	493a      	ldr	r1, [pc, #232]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf6:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bfe:	60d3      	str	r3, [r2, #12]
 8001c00:	e011      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f8c8 	bl	8001da8 <RCCEx_PLLSAI1_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001c1c:	7cfb      	ldrb	r3, [r7, #19]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001c22:	7cfb      	ldrb	r3, [r7, #19]
 8001c24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d028      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c32:	4923      	ldr	r1, [pc, #140]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c50:	d106      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c5c:	60d3      	str	r3, [r2, #12]
 8001c5e:	e011      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f899 	bl	8001da8 <RCCEx_PLLSAI1_Config>
 8001c76:	4603      	mov	r3, r0
 8001c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02b      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c90:	490b      	ldr	r1, [pc, #44]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cae:	d109      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cba:	60d3      	str	r3, [r2, #12]
 8001cbc:	e014      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f867 	bl	8001da8 <RCCEx_PLLSAI1_Config>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cde:	7cfb      	ldrb	r3, [r7, #19]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d02f      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cf4:	492b      	ldr	r1, [pc, #172]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d12:	d10d      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f844 	bl	8001da8 <RCCEx_PLLSAI1_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d014      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	74bb      	strb	r3, [r7, #18]
 8001d2e:	e011      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f921 	bl	8001f88 <RCCEx_PLLSAI2_Config>
 8001d46:	4603      	mov	r3, r0
 8001d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d4a:	7cfb      	ldrb	r3, [r7, #19]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001d60:	4910      	ldr	r1, [pc, #64]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d68:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001d9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000

08001da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d018      	beq.n	8001df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001dc2:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10d      	bne.n	8001dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001dda:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
       ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d044      	beq.n	8001e78 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e041      	b.n	8001e78 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d00c      	beq.n	8001e16 <RCCEx_PLLSAI1_Config+0x6e>
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d013      	beq.n	8001e28 <RCCEx_PLLSAI1_Config+0x80>
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d120      	bne.n	8001e46 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e04:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11d      	bne.n	8001e4c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e14:	e01a      	b.n	8001e4c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e16:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e26:	e013      	b.n	8001e50 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e28:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10f      	bne.n	8001e54 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001e44:	e006      	b.n	8001e54 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4a:	e004      	b.n	8001e56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e4c:	bf00      	nop
 8001e4e:	e002      	b.n	8001e56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e50:	bf00      	nop
 8001e52:	e000      	b.n	8001e56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e54:	bf00      	nop
    }

    if(status == HAL_OK)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e5c:	4849      	ldr	r0, [pc, #292]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	430b      	orrs	r3, r1
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d17d      	bne.n	8001f7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e7e:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e80:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fb91 	bl	80005b0 <HAL_GetTick>
 8001e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e90:	e009      	b.n	8001ea6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e92:	f7fe fb8d 	bl	80005b0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d902      	bls.n	8001ea6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8001ea4:	e005      	b.n	8001eb2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ef      	bne.n	8001e92 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d160      	bne.n	8001f7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d111      	bne.n	8001ee2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ebe:	4831      	ldr	r0, [pc, #196]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6892      	ldr	r2, [r2, #8]
 8001ed0:	0211      	lsls	r1, r2, #8
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	0912      	lsrs	r2, r2, #4
 8001ed8:	0452      	lsls	r2, r2, #17
 8001eda:	430a      	orrs	r2, r1
 8001edc:	4313      	orrs	r3, r2
 8001ede:	6103      	str	r3, [r0, #16]
 8001ee0:	e027      	b.n	8001f32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d112      	bne.n	8001f0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ee8:	4826      	ldr	r0, [pc, #152]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001ef2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6892      	ldr	r2, [r2, #8]
 8001efa:	0211      	lsls	r1, r2, #8
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6912      	ldr	r2, [r2, #16]
 8001f00:	0852      	lsrs	r2, r2, #1
 8001f02:	3a01      	subs	r2, #1
 8001f04:	0552      	lsls	r2, r2, #21
 8001f06:	430a      	orrs	r2, r1
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	6103      	str	r3, [r0, #16]
 8001f0c:	e011      	b.n	8001f32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6892      	ldr	r2, [r2, #8]
 8001f20:	0211      	lsls	r1, r2, #8
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6952      	ldr	r2, [r2, #20]
 8001f26:	0852      	lsrs	r2, r2, #1
 8001f28:	3a01      	subs	r2, #1
 8001f2a:	0652      	lsls	r2, r2, #25
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fb37 	bl	80005b0 <HAL_GetTick>
 8001f42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f44:	e009      	b.n	8001f5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f46:	f7fe fb33 	bl	80005b0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d902      	bls.n	8001f5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	73fb      	strb	r3, [r7, #15]
          break;
 8001f58:	e005      	b.n	8001f66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ef      	beq.n	8001f46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f6c:	4905      	ldr	r1, [pc, #20]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000

08001f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f96:	4b68      	ldr	r3, [pc, #416]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d018      	beq.n	8001fd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0203 	and.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d10d      	bne.n	8001fce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d044      	beq.n	8002058 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e041      	b.n	8002058 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d00c      	beq.n	8001ff6 <RCCEx_PLLSAI2_Config+0x6e>
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d013      	beq.n	8002008 <RCCEx_PLLSAI2_Config+0x80>
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d120      	bne.n	8002026 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001fe4:	4b54      	ldr	r3, [pc, #336]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11d      	bne.n	800202c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff4:	e01a      	b.n	800202c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ff6:	4b50      	ldr	r3, [pc, #320]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d116      	bne.n	8002030 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002006:	e013      	b.n	8002030 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002024:	e006      	b.n	8002034 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
      break;
 800202a:	e004      	b.n	8002036 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800202c:	bf00      	nop
 800202e:	e002      	b.n	8002036 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002030:	bf00      	nop
 8002032:	e000      	b.n	8002036 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002034:	bf00      	nop
    }

    if(status == HAL_OK)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800203c:	483e      	ldr	r0, [pc, #248]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	430b      	orrs	r3, r1
 8002054:	4313      	orrs	r3, r2
 8002056:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d167      	bne.n	800212e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800205e:	4a36      	ldr	r2, [pc, #216]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800206a:	f7fe faa1 	bl	80005b0 <HAL_GetTick>
 800206e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002070:	e009      	b.n	8002086 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002072:	f7fe fa9d 	bl	80005b0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d902      	bls.n	8002086 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	73fb      	strb	r3, [r7, #15]
        break;
 8002084:	e005      	b.n	8002092 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d14a      	bne.n	800212e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d111      	bne.n	80020c2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800209e:	4826      	ldr	r0, [pc, #152]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6892      	ldr	r2, [r2, #8]
 80020b0:	0211      	lsls	r1, r2, #8
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68d2      	ldr	r2, [r2, #12]
 80020b6:	0912      	lsrs	r2, r2, #4
 80020b8:	0452      	lsls	r2, r2, #17
 80020ba:	430a      	orrs	r2, r1
 80020bc:	4313      	orrs	r3, r2
 80020be:	6143      	str	r3, [r0, #20]
 80020c0:	e011      	b.n	80020e6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020c2:	481d      	ldr	r0, [pc, #116]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6892      	ldr	r2, [r2, #8]
 80020d4:	0211      	lsls	r1, r2, #8
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6912      	ldr	r2, [r2, #16]
 80020da:	0852      	lsrs	r2, r2, #1
 80020dc:	3a01      	subs	r2, #1
 80020de:	0652      	lsls	r2, r2, #25
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7fe fa5d 	bl	80005b0 <HAL_GetTick>
 80020f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80020f8:	e009      	b.n	800210e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020fa:	f7fe fa59 	bl	80005b0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d902      	bls.n	800210e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	73fb      	strb	r3, [r7, #15]
          break;
 800210c:	e005      	b.n	800211a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ef      	beq.n	80020fa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002120:	4905      	ldr	r1, [pc, #20]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e040      	b.n	80021d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 ff1e 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2224      	movs	r2, #36	; 0x24
 8002168:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f82c 	bl	80021d8 <UART_SetConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e022      	b.n	80021d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fb84 	bl	80028a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	6852      	ldr	r2, [r2, #4]
 80021a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	6892      	ldr	r2, [r2, #8]
 80021b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fc0b 	bl	80029e4 <UART_CheckIdleState>
 80021ce:	4603      	mov	r3, r0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021dc:	b08a      	sub	sp, #40	; 0x28
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4313      	orrs	r3, r2
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	4bb7      	ldr	r3, [pc, #732]	; (80024f0 <UART_SetConfig+0x318>)
 8002212:	400b      	ands	r3, r1
 8002214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002216:	430b      	orrs	r3, r1
 8002218:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4aae      	ldr	r2, [pc, #696]	; (80024f4 <UART_SetConfig+0x31c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	4313      	orrs	r3, r2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	6892      	ldr	r2, [r2, #8]
 8002254:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4aa5      	ldr	r2, [pc, #660]	; (80024f8 <UART_SetConfig+0x320>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d126      	bne.n	80022b6 <UART_SetConfig+0xde>
 8002268:	4ba4      	ldr	r3, [pc, #656]	; (80024fc <UART_SetConfig+0x324>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b03      	cmp	r3, #3
 8002274:	d81a      	bhi.n	80022ac <UART_SetConfig+0xd4>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <UART_SetConfig+0xa4>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	0800229d 	.word	0x0800229d
 8002284:	08002295 	.word	0x08002295
 8002288:	080022a5 	.word	0x080022a5
 800228c:	2301      	movs	r3, #1
 800228e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002292:	e105      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002294:	2302      	movs	r3, #2
 8002296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800229a:	e101      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800229c:	2304      	movs	r3, #4
 800229e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022a2:	e0fd      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80022a4:	2308      	movs	r3, #8
 80022a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022aa:	e0f9      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80022ac:	2310      	movs	r3, #16
 80022ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022b2:	bf00      	nop
 80022b4:	e0f4      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a91      	ldr	r2, [pc, #580]	; (8002500 <UART_SetConfig+0x328>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d138      	bne.n	8002332 <UART_SetConfig+0x15a>
 80022c0:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <UART_SetConfig+0x324>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d82c      	bhi.n	8002328 <UART_SetConfig+0x150>
 80022ce:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <UART_SetConfig+0xfc>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	08002309 	.word	0x08002309
 80022d8:	08002329 	.word	0x08002329
 80022dc:	08002329 	.word	0x08002329
 80022e0:	08002329 	.word	0x08002329
 80022e4:	08002319 	.word	0x08002319
 80022e8:	08002329 	.word	0x08002329
 80022ec:	08002329 	.word	0x08002329
 80022f0:	08002329 	.word	0x08002329
 80022f4:	08002311 	.word	0x08002311
 80022f8:	08002329 	.word	0x08002329
 80022fc:	08002329 	.word	0x08002329
 8002300:	08002329 	.word	0x08002329
 8002304:	08002321 	.word	0x08002321
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800230e:	e0c7      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002310:	2302      	movs	r3, #2
 8002312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002316:	e0c3      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002318:	2304      	movs	r3, #4
 800231a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800231e:	e0bf      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002320:	2308      	movs	r3, #8
 8002322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002326:	e0bb      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002328:	2310      	movs	r3, #16
 800232a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800232e:	bf00      	nop
 8002330:	e0b6      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a73      	ldr	r2, [pc, #460]	; (8002504 <UART_SetConfig+0x32c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d125      	bne.n	8002388 <UART_SetConfig+0x1b0>
 800233c:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <UART_SetConfig+0x324>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002346:	2b10      	cmp	r3, #16
 8002348:	d011      	beq.n	800236e <UART_SetConfig+0x196>
 800234a:	2b10      	cmp	r3, #16
 800234c:	d802      	bhi.n	8002354 <UART_SetConfig+0x17c>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <UART_SetConfig+0x186>
 8002352:	e014      	b.n	800237e <UART_SetConfig+0x1a6>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d006      	beq.n	8002366 <UART_SetConfig+0x18e>
 8002358:	2b30      	cmp	r3, #48	; 0x30
 800235a:	d00c      	beq.n	8002376 <UART_SetConfig+0x19e>
 800235c:	e00f      	b.n	800237e <UART_SetConfig+0x1a6>
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002364:	e09c      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002366:	2302      	movs	r3, #2
 8002368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800236c:	e098      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800236e:	2304      	movs	r3, #4
 8002370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002374:	e094      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002376:	2308      	movs	r3, #8
 8002378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800237c:	e090      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800237e:	2310      	movs	r3, #16
 8002380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002384:	bf00      	nop
 8002386:	e08b      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5e      	ldr	r2, [pc, #376]	; (8002508 <UART_SetConfig+0x330>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d125      	bne.n	80023de <UART_SetConfig+0x206>
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <UART_SetConfig+0x324>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d011      	beq.n	80023c4 <UART_SetConfig+0x1ec>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d802      	bhi.n	80023aa <UART_SetConfig+0x1d2>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <UART_SetConfig+0x1dc>
 80023a8:	e014      	b.n	80023d4 <UART_SetConfig+0x1fc>
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d006      	beq.n	80023bc <UART_SetConfig+0x1e4>
 80023ae:	2bc0      	cmp	r3, #192	; 0xc0
 80023b0:	d00c      	beq.n	80023cc <UART_SetConfig+0x1f4>
 80023b2:	e00f      	b.n	80023d4 <UART_SetConfig+0x1fc>
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ba:	e071      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80023bc:	2302      	movs	r3, #2
 80023be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023c2:	e06d      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80023c4:	2304      	movs	r3, #4
 80023c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ca:	e069      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80023cc:	2308      	movs	r3, #8
 80023ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023d2:	e065      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80023d4:	2310      	movs	r3, #16
 80023d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023da:	bf00      	nop
 80023dc:	e060      	b.n	80024a0 <UART_SetConfig+0x2c8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <UART_SetConfig+0x334>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d129      	bne.n	800243c <UART_SetConfig+0x264>
 80023e8:	4b44      	ldr	r3, [pc, #272]	; (80024fc <UART_SetConfig+0x324>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f6:	d014      	beq.n	8002422 <UART_SetConfig+0x24a>
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d802      	bhi.n	8002404 <UART_SetConfig+0x22c>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <UART_SetConfig+0x23a>
 8002402:	e016      	b.n	8002432 <UART_SetConfig+0x25a>
 8002404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002408:	d007      	beq.n	800241a <UART_SetConfig+0x242>
 800240a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800240e:	d00c      	beq.n	800242a <UART_SetConfig+0x252>
 8002410:	e00f      	b.n	8002432 <UART_SetConfig+0x25a>
 8002412:	2300      	movs	r3, #0
 8002414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002418:	e042      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800241a:	2302      	movs	r3, #2
 800241c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002420:	e03e      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002422:	2304      	movs	r3, #4
 8002424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002428:	e03a      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800242a:	2308      	movs	r3, #8
 800242c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002430:	e036      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002432:	2310      	movs	r3, #16
 8002434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002438:	bf00      	nop
 800243a:	e031      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <UART_SetConfig+0x31c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d129      	bne.n	800249a <UART_SetConfig+0x2c2>
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <UART_SetConfig+0x324>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002454:	d014      	beq.n	8002480 <UART_SetConfig+0x2a8>
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d802      	bhi.n	8002462 <UART_SetConfig+0x28a>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <UART_SetConfig+0x298>
 8002460:	e016      	b.n	8002490 <UART_SetConfig+0x2b8>
 8002462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002466:	d007      	beq.n	8002478 <UART_SetConfig+0x2a0>
 8002468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800246c:	d00c      	beq.n	8002488 <UART_SetConfig+0x2b0>
 800246e:	e00f      	b.n	8002490 <UART_SetConfig+0x2b8>
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002476:	e013      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002478:	2302      	movs	r3, #2
 800247a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800247e:	e00f      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002480:	2304      	movs	r3, #4
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002486:	e00b      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002488:	2308      	movs	r3, #8
 800248a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800248e:	e007      	b.n	80024a0 <UART_SetConfig+0x2c8>
 8002490:	2310      	movs	r3, #16
 8002492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002496:	bf00      	nop
 8002498:	e002      	b.n	80024a0 <UART_SetConfig+0x2c8>
 800249a:	2310      	movs	r3, #16
 800249c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <UART_SetConfig+0x31c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f040 80f1 	bne.w	800268e <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d837      	bhi.n	8002524 <UART_SetConfig+0x34c>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <UART_SetConfig+0x2e4>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024e1 	.word	0x080024e1
 80024c0:	08002525 	.word	0x08002525
 80024c4:	080024e9 	.word	0x080024e9
 80024c8:	08002525 	.word	0x08002525
 80024cc:	08002515 	.word	0x08002515
 80024d0:	08002525 	.word	0x08002525
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002525 	.word	0x08002525
 80024dc:	0800251d 	.word	0x0800251d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80024e0:	f7ff f8f0 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 80024e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80024e6:	e020      	b.n	800252a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <UART_SetConfig+0x338>)
 80024ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80024ec:	e01d      	b.n	800252a <UART_SetConfig+0x352>
 80024ee:	bf00      	nop
 80024f0:	efff69f3 	.word	0xefff69f3
 80024f4:	40008000 	.word	0x40008000
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40021000 	.word	0x40021000
 8002500:	40004400 	.word	0x40004400
 8002504:	40004800 	.word	0x40004800
 8002508:	40004c00 	.word	0x40004c00
 800250c:	40005000 	.word	0x40005000
 8002510:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002514:	f7ff f840 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8002518:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800251a:	e006      	b.n	800252a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800251c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002520:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002522:	e002      	b.n	800252a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	76fb      	strb	r3, [r7, #27]
        break;
 8002528:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 81ab 	beq.w	8002888 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	441a      	add	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	429a      	cmp	r2, r3
 8002540:	d805      	bhi.n	800254e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	429a      	cmp	r2, r3
 800254c:	d202      	bcs.n	8002554 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	76fb      	strb	r3, [r7, #27]
 8002552:	e199      	b.n	8002888 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 8002554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002558:	2b08      	cmp	r3, #8
 800255a:	f200 8085 	bhi.w	8002668 <UART_SetConfig+0x490>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <UART_SetConfig+0x38c>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002589 	.word	0x08002589
 8002568:	08002669 	.word	0x08002669
 800256c:	080025cb 	.word	0x080025cb
 8002570:	08002669 	.word	0x08002669
 8002574:	080025ff 	.word	0x080025ff
 8002578:	08002669 	.word	0x08002669
 800257c:	08002669 	.word	0x08002669
 8002580:	08002669 	.word	0x08002669
 8002584:	0800263f 	.word	0x0800263f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002588:	f7ff f89c 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 800258c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f04f 0400 	mov.w	r4, #0
 8002594:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8002598:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800259c:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	f04f 0400 	mov.w	r4, #0
 80025aa:	eb18 0003 	adds.w	r0, r8, r3
 80025ae:	eb49 0104 	adc.w	r1, r9, r4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4623      	mov	r3, r4
 80025be:	f7fd fe03 	bl	80001c8 <__aeabi_uldivmod>
 80025c2:	4603      	mov	r3, r0
 80025c4:	460c      	mov	r4, r1
 80025c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80025c8:	e051      	b.n	800266e <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	49aa      	ldr	r1, [pc, #680]	; (8002880 <UART_SetConfig+0x6a8>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	eb13 0801 	adds.w	r8, r3, r1
 80025de:	eb44 0902 	adc.w	r9, r4, r2
 80025e2:	4640      	mov	r0, r8
 80025e4:	4649      	mov	r1, r9
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	461a      	mov	r2, r3
 80025f0:	4623      	mov	r3, r4
 80025f2:	f7fd fde9 	bl	80001c8 <__aeabi_uldivmod>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80025fc:	e037      	b.n	800266e <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80025fe:	f7fe ffcb 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8002602:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	461a      	mov	r2, r3
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	021d      	lsls	r5, r3, #8
 800260e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8002612:	0214      	lsls	r4, r2, #8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	461a      	mov	r2, r3
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	18a0      	adds	r0, r4, r2
 8002622:	eb45 0103 	adc.w	r1, r5, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f04f 0400 	mov.w	r4, #0
 800262e:	461a      	mov	r2, r3
 8002630:	4623      	mov	r3, r4
 8002632:	f7fd fdc9 	bl	80001c8 <__aeabi_uldivmod>
 8002636:	4603      	mov	r3, r0
 8002638:	460c      	mov	r4, r1
 800263a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800263c:	e017      	b.n	800266e <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800264c:	f144 0100 	adc.w	r1, r4, #0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	461a      	mov	r2, r3
 800265a:	4623      	mov	r3, r4
 800265c:	f7fd fdb4 	bl	80001c8 <__aeabi_uldivmod>
 8002660:	4603      	mov	r3, r0
 8002662:	460c      	mov	r4, r1
 8002664:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002666:	e002      	b.n	800266e <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	76fb      	strb	r3, [r7, #27]
            break;
 800266c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002674:	d308      	bcc.n	8002688 <UART_SetConfig+0x4b0>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267c:	d204      	bcs.n	8002688 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e0ff      	b.n	8002888 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	76fb      	strb	r3, [r7, #27]
 800268c:	e0fc      	b.n	8002888 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002696:	f040 8083 	bne.w	80027a0 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 800269a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d85e      	bhi.n	8002760 <UART_SetConfig+0x588>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <UART_SetConfig+0x4d0>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026cd 	.word	0x080026cd
 80026ac:	080026ed 	.word	0x080026ed
 80026b0:	0800270d 	.word	0x0800270d
 80026b4:	08002761 	.word	0x08002761
 80026b8:	08002729 	.word	0x08002729
 80026bc:	08002761 	.word	0x08002761
 80026c0:	08002761 	.word	0x08002761
 80026c4:	08002761 	.word	0x08002761
 80026c8:	08002749 	.word	0x08002749
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026cc:	f7fe fffa 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 80026d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	005a      	lsls	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	441a      	add	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80026ea:	e03c      	b.n	8002766 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026ec:	f7ff f800 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 80026f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	005a      	lsls	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	b29b      	uxth	r3, r3
 8002708:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800270a:	e02c      	b.n	8002766 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002716:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6852      	ldr	r2, [r2, #4]
 800271e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002726:	e01e      	b.n	8002766 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002728:	f7fe ff36 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800272c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	005a      	lsls	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	441a      	add	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	b29b      	uxth	r3, r3
 8002744:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002746:	e00e      	b.n	8002766 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800275e:	e002      	b.n	8002766 <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	76fb      	strb	r3, [r7, #27]
        break;
 8002764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d916      	bls.n	800279a <UART_SetConfig+0x5c2>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d212      	bcs.n	800279a <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f023 030f 	bic.w	r3, r3, #15
 800277c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	b29b      	uxth	r3, r3
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	b29a      	uxth	r2, r3
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	4313      	orrs	r3, r2
 800278e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	89fa      	ldrh	r2, [r7, #14]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	e076      	b.n	8002888 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	76fb      	strb	r3, [r7, #27]
 800279e:	e073      	b.n	8002888 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 80027a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d85c      	bhi.n	8002862 <UART_SetConfig+0x68a>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <UART_SetConfig+0x5d8>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027d5 	.word	0x080027d5
 80027b4:	080027f3 	.word	0x080027f3
 80027b8:	08002811 	.word	0x08002811
 80027bc:	08002863 	.word	0x08002863
 80027c0:	0800282d 	.word	0x0800282d
 80027c4:	08002863 	.word	0x08002863
 80027c8:	08002863 	.word	0x08002863
 80027cc:	08002863 	.word	0x08002863
 80027d0:	0800284b 	.word	0x0800284b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d4:	f7fe ff76 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 80027d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	085a      	lsrs	r2, r3, #1
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027f0:	e03a      	b.n	8002868 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027f2:	f7fe ff7d 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 80027f6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	085a      	lsrs	r2, r3, #1
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	441a      	add	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	b29b      	uxth	r3, r3
 800280c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800280e:	e02b      	b.n	8002868 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800281a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6852      	ldr	r2, [r2, #4]
 8002822:	fbb3 f3f2 	udiv	r3, r3, r2
 8002826:	b29b      	uxth	r3, r3
 8002828:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800282a:	e01d      	b.n	8002868 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800282c:	f7fe feb4 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8002830:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	085a      	lsrs	r2, r3, #1
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	b29b      	uxth	r3, r3
 8002846:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002848:	e00e      	b.n	8002868 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	b29b      	uxth	r3, r3
 800285e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002860:	e002      	b.n	8002868 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	76fb      	strb	r3, [r7, #27]
        break;
 8002866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	d90a      	bls.n	8002884 <UART_SetConfig+0x6ac>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002874:	d206      	bcs.n	8002884 <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e003      	b.n	8002888 <UART_SetConfig+0x6b0>
 8002880:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002894:	7efb      	ldrb	r3, [r7, #27]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080028a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	6852      	ldr	r2, [r2, #4]
 80028be:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	6852      	ldr	r2, [r2, #4]
 80028e0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	6852      	ldr	r2, [r2, #4]
 8002902:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	6852      	ldr	r2, [r2, #4]
 8002924:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01a      	beq.n	80029b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	6852      	ldr	r2, [r2, #4]
 800298a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299e:	d10a      	bne.n	80029b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	6852      	ldr	r2, [r2, #4]
 80029aa:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	6852      	ldr	r2, [r2, #4]
 80029cc:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  }
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029f2:	f7fd fddd 	bl	80005b0 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d10e      	bne.n	8002a24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f82a 	bl	8002a6e <UART_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e020      	b.n	8002a66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d10e      	bne.n	8002a50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f814 	bl	8002a6e <UART_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e00a      	b.n	8002a66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7e:	e05d      	b.n	8002b3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d059      	beq.n	8002b3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a88:	f7fd fd92 	bl	80005b0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	1ad2      	subs	r2, r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d802      	bhi.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11b      	bne.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e042      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d02b      	beq.n	8002b3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af2:	d123      	bne.n	8002b3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002afc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6892      	ldr	r2, [r2, #8]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e00f      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	401a      	ands	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d092      	beq.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	4a53      	ldr	r2, [pc, #332]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002b7c:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b86:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b92:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	4a47      	ldr	r2, [pc, #284]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb6:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2120      	movs	r1, #32
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be2:	f7fd ff95 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bec:	4837      	ldr	r0, [pc, #220]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002bee:	f7fd ff8f 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <MX_GPIO_Init+0x16c>)
 8002bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4619      	mov	r1, r3
 8002c06:	4831      	ldr	r0, [pc, #196]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002c08:	f7fd fdc2 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c26:	f7fd fdb3 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	4822      	ldr	r0, [pc, #136]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002c44:	f7fd fda4 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <MX_GPIO_Init+0x170>)
 8002c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c60:	f7fd fd96 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8002c76:	230f      	movs	r3, #15
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c84:	f7fd fd84 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca0:	f7fd fd76 	bl	8000790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f7fd fd68 	bl	8000790 <HAL_GPIO_Init>

}
 8002cc0:	bf00      	nop
 8002cc2:	3728      	adds	r7, #40	; 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	48000800 	.word	0x48000800
 8002cd0:	10210000 	.word	0x10210000
 8002cd4:	10110000 	.word	0x10110000

08002cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cde:	f7fd fbfb 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */
  GPIO_InitTypeDef gpio;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce2:	f000 f829 	bl	8002d38 <SystemClock_Config>
//  HAL_GPIO_Init(GPIOA,&gpio);


  // KONFIGURACJA PRZYCISKU

  gpio.Pin = GPIO_PIN_13;
 8002ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cea:	607b      	str	r3, [r7, #4]
  gpio.Mode = GPIO_MODE_INPUT;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_PULLUP;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &gpio);
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480e      	ldr	r0, [pc, #56]	; (8002d34 <main+0x5c>)
 8002cfa:	f7fd fd49 	bl	8000790 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfe:	f7ff ff31 	bl	8002b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d02:	f000 f91d 	bl	8002f40 <MX_USART2_UART_Init>
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//		  HAL_Delay(5000);
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//		  HAL_Delay(5000);
//		  i++;
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d0a:	480a      	ldr	r0, [pc, #40]	; (8002d34 <main+0x5c>)
 8002d0c:	f7fd fee8 	bl	8000ae0 <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <main+0x4c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002d16:	2201      	movs	r2, #1
 8002d18:	2120      	movs	r1, #32
 8002d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1e:	f7fd fef7 	bl	8000b10 <HAL_GPIO_WritePin>
 8002d22:	e7f0      	b.n	8002d06 <main+0x2e>
	  	  }else{
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2120      	movs	r1, #32
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2c:	f7fd fef0 	bl	8000b10 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002d30:	e7e9      	b.n	8002d06 <main+0x2e>
 8002d32:	bf00      	nop
 8002d34:	48000800 	.word	0x48000800

08002d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0b8      	sub	sp, #224	; 0xe0
 8002d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d42:	2244      	movs	r2, #68	; 0x44
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f9ba 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2288      	movs	r2, #136	; 0x88
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f9ac 	bl	80030c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d76:	2310      	movs	r3, #16
 8002d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d82:	2302      	movs	r3, #2
 8002d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002d8e:	230a      	movs	r3, #10
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d94:	2307      	movs	r3, #7
 8002d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002da0:	2302      	movs	r3, #2
 8002da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ff2c 	bl	8000c08 <HAL_RCC_OscConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002db6:	f000 f834 	bl	8002e22 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dba:	230f      	movs	r3, #15
 8002dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002ddc:	2104      	movs	r1, #4
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe faf8 	bl	80013d4 <HAL_RCC_ClockConfig>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002dea:	f000 f81a 	bl	8002e22 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dee:	2302      	movs	r3, #2
 8002df0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002df2:	2300      	movs	r3, #0
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df6:	463b      	mov	r3, r7
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fcef 	bl	80017dc <HAL_RCCEx_PeriphCLKConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002e04:	f000 f80d 	bl	8002e22 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002e08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e0c:	f7fd fea6 	bl	8000b5c <HAL_PWREx_ControlVoltageScaling>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002e16:	f000 f804 	bl	8002e22 <Error_Handler>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	37e0      	adds	r7, #224	; 0xe0
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e36:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_MspInit+0x44>)
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_MspInit+0x44>)
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6613      	str	r3, [r2, #96]	; 0x60
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_MspInit+0x44>)
 8002e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_MspInit+0x44>)
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HAL_MspInit+0x44>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_MspInit+0x44>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f7fd fb5e 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <SystemInit+0x64>)
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <SystemInit+0x64>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ee8:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <SystemInit+0x68>)
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <SystemInit+0x68>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <SystemInit+0x68>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002efa:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <SystemInit+0x68>)
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <SystemInit+0x68>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <SystemInit+0x68>)
 8002f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <SystemInit+0x68>)
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <SystemInit+0x68>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <SystemInit+0x68>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SystemInit+0x64>)
 8002f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	40021000 	.word	0x40021000

08002f40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <MX_USART2_UART_Init+0x5c>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f66:	220c      	movs	r2, #12
 8002f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USART2_UART_Init+0x58>)
 8002f84:	f7ff f8da 	bl	800213c <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f8e:	f7ff ff48 	bl	8002e22 <Error_Handler>
  }

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000002c 	.word	0x2000002c
 8002f9c:	40004400 	.word	0x40004400

08002fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_UART_MspInit+0x7c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d128      	bne.n	8003014 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <HAL_UART_MspInit+0x80>)
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_UART_MspInit+0x80>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_UART_MspInit+0x80>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_UART_MspInit+0x80>)
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_UART_MspInit+0x80>)
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_UART_MspInit+0x80>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003002:	2307      	movs	r3, #7
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 0314 	add.w	r3, r7, #20
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003010:	f7fd fbbe 	bl	8000790 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003014:	bf00      	nop
 8003016:	3728      	adds	r7, #40	; 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40004400 	.word	0x40004400
 8003020:	40021000 	.word	0x40021000

08003024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800305c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003028:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800302a:	e003      	b.n	8003034 <LoopCopyDataInit>

0800302c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800302e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003030:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003032:	3104      	adds	r1, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003034:	480b      	ldr	r0, [pc, #44]	; (8003064 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003038:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800303a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800303c:	d3f6      	bcc.n	800302c <CopyDataInit>
	ldr	r2, =_sbss
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003040:	e002      	b.n	8003048 <LoopFillZerobss>

08003042 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003042:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003044:	f842 3b04 	str.w	r3, [r2], #4

08003048 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <LoopForever+0x16>)
	cmp	r2, r3
 800304a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800304c:	d3f9      	bcc.n	8003042 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800304e:	f7ff ff41 	bl	8002ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003052:	f000 f811 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003056:	f7ff fe3f 	bl	8002cd8 <main>

0800305a <LoopForever>:

LoopForever:
    b LoopForever
 800305a:	e7fe      	b.n	800305a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800305c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003060:	08003140 	.word	0x08003140
	ldr	r0, =_sdata
 8003064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003068:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800306c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003070:	200000ac 	.word	0x200000ac

08003074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC1_2_IRQHandler>
	...

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4e0d      	ldr	r6, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1ba4      	subs	r4, r4, r6
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2500      	movs	r5, #0
 8003084:	42a5      	cmp	r5, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4e0b      	ldr	r6, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 f820 	bl	80030d0 <_init>
 8003090:	1ba4      	subs	r4, r4, r6
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2500      	movs	r5, #0
 8003096:	42a5      	cmp	r5, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a0:	4798      	blx	r3
 80030a2:	3501      	adds	r5, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030aa:	4798      	blx	r3
 80030ac:	3501      	adds	r5, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003138 	.word	0x08003138
 80030b4:	08003138 	.word	0x08003138
 80030b8:	08003138 	.word	0x08003138
 80030bc:	0800313c 	.word	0x0800313c

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
